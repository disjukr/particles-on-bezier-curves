/**
 * Generated by Apache Royale Compiler from ParticleTest.as
 * ParticleTest
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('ParticleTest');
/* Royale Dependency List: */
goog.provide('ParticleTest.Ball');
goog.provide('ParticleTest.Curve');



/**
 * @constructor
 * @extends {openfl.display.Sprite}
 */
ParticleTest = function() {
  var self = this;
  ParticleTest.base(this, 'constructor');
  var /** @type {Function} */ __localFn0__ = function() {
    var foreachiter0_target = curves;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var c = foreachiter0_target[foreachiter0];
    
      c.reset();}
    
  }
  function ENTER_FRAME(e) {
    balls.push(new ParticleTest.Ball());
    var /** @type {ParticleTest.Ball} */ ball, /** @type {ParticleTest.Curve} */ curve;
    self.graphics.clear();
    var foreachiter1_target = curves;
    for (var foreachiter1 in foreachiter1_target) 
    {
    curve = foreachiter1_target[foreachiter1];
    {
      drawCurve(self.graphics, curve);
    }}
    
    for (var /** @type {number} */ i = 0; i < balls.length; i++) {
      ball = balls[i];
      ball.x += ball.vx, ball.y += ball.vy;
      var /** @type {number} */ t, /** @type {number} */ theT = 2, /** @type {ParticleTest.Curve} */ theCurve;
      var foreachiter2_target = curves;
      for (var foreachiter2 in foreachiter2_target) 
      {
      curve = foreachiter2_target[foreachiter2];
      {
        t = curve.getT(ball.prevx, ball.prevy, ball.x, ball.y);
        if (t < theT) {
          theT = t, theCurve = curve;
        }
      }}
      
      if (0 <= theT && theT <= 1) {
        ball.resolve(theCurve, theT);
      }
      if (ball.y > sh || ball.x < 0 || ball.x > sw) {
        balls.splice(i, 1);
      }
      drawBall(self.graphics, ball);
      ball.prevx = ball.x;
      ball.prevy = ball.y;
      ball.vy += gravity;
    }
  };
  function drawBall(g, b) {
    g.lineStyle(3, 0xFF0000);
    g.moveTo(b.prevx, b.prevy);
    g.lineTo(b.x, b.y);
  };
  function drawCurve(g, c) {
    g.lineStyle(3, 0x000000);
    g.moveTo(c.p0x, c.p0y);
    g.curveTo(c.p1x, c.p1y, c.p2x, c.p2y);
  };
  var /** @type {number} */ sw = this.stage.stageWidth;
  var /** @type {number} */ sh = this.stage.stageHeight;
  var /** @type {Array} */ balls = [];
  var /** @type {Array} */ curves = [new ParticleTest.Curve(), new ParticleTest.Curve(), new ParticleTest.Curve(), new ParticleTest.Curve()];
  var /** @type {number} */ gravity = 0.7;
  this.stage.addEventListener("mouseDown", __localFn0__);
  this.addEventListener(openfl.events.Event.ENTER_FRAME, ENTER_FRAME);
  
};
goog.inherits(ParticleTest, openfl.display.Sprite);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('ParticleTest', ParticleTest);


/**
 * @export
 * @param {number} start
 * @param {number} end
 * @param {number} t
 * @return {number}
 */
ParticleTest.linear = function(start, end, t) {
  return start + (end - start) * t;
};


/**
 * @export
 * @param {Array} values
 * @param {number} t
 * @return {number}
 */
ParticleTest.bezier = function(values, t) {
  if (values.length < 2)
    return NaN;
  if (values.length == 2)
    return ParticleTest.linear(values[0], values[1], t);
  var /** @type {Array} */ postValues = values.concat();
  var /** @type {number} */ i = 0;
  while (postValues.length > 1) {
    var /** @type {Array} */ resultValues = new Array();
    var /** @type {number} */ count = postValues.length - 1;
    for (i = 0; i < count; ++i) {
      resultValues.push(ParticleTest.linear(postValues[i], postValues[i + 1], t));
    }
    postValues = resultValues;
  }
  return postValues[0];
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
ParticleTest.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ParticleTest', qName: 'ParticleTest', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
ParticleTest.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'ParticleTest': { type: '', declaredBy: 'ParticleTest'},
        '|linear': { type: 'Number', declaredBy: 'ParticleTest', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: false } ]; }},
        '|bezier': { type: 'Number', declaredBy: 'ParticleTest', parameters: function () { return [  { index: 1, type: 'Array', optional: false },{ index: 2, type: 'Number', optional: false } ]; }}
      };
    },
    metadata: function () { return [  ]; }
  };
};



/**
 * @constructor
 */
ParticleTest.Curve = function() {
  this.reset();
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('ParticleTest.Curve', ParticleTest.Curve);


/**
 * @private
 * @type {number}
 */
ParticleTest.Curve.prototype._p0x;


/**
 * @private
 * @type {number}
 */
ParticleTest.Curve.prototype._p0y;


/**
 * @private
 * @type {number}
 */
ParticleTest.Curve.prototype._p1x;


/**
 * @private
 * @type {number}
 */
ParticleTest.Curve.prototype._p1y;


/**
 * @private
 * @type {number}
 */
ParticleTest.Curve.prototype._p2x;


/**
 * @private
 * @type {number}
 */
ParticleTest.Curve.prototype._p2y;


/**
 * @export
 */
ParticleTest.Curve.prototype.reset = function() {
  this.p0x = Math.random() * 200, this.p0y = Math.random() * 100 + 150;
  this.p1x = Math.random() * 550, this.p1y = Math.random() * 400;
  this.p2x = Math.random() * 200 + 350, this.p2y = Math.random() * 100 + 150;
};


/**
 * @export
 * @param {number} slx
 * @param {number} sly
 * @param {number} elx
 * @param {number} ely
 * @return {number}
 */
ParticleTest.Curve.prototype.getT = function(slx, sly, elx, ely) {
  if (slx == elx)
    slx += 0.01;
  var /** @type {number} */ px = this.p0x - 2 * this.p1x + this.p2x, /** @type {number} */ py = this.p0y - 2 * this.p1y + this.p2y;
  var /** @type {number} */ qx = -2 * this.p0x + 2 * this.p1x, /** @type {number} */ qy = -2 * this.p0y + 2 * this.p1y;
  var /** @type {number} */ rx = this.p0x, /** @type {number} */ ry = this.p0y;
  var /** @type {number} */ ax = elx - slx, /** @type {number} */ ay = ely - sly;
  var /** @type {number} */ bx = slx, /** @type {number} */ by = sly;
  var /** @type {number} */ X = ay * px - ax * py;
  var /** @type {number} */ Y = ay * qx - ax * qy;
  var /** @type {number} */ Z = ay * rx - ay * bx - ax * ry + ax * by;
  var /** @type {number} */ d = Y * Y - 4 * X * Z;
  if (d < 0)
    return NaN;
  var /** @type {number} */ t1, /** @type {number} */ s1;
  if (d == 0) {
    t1 = -Y / (2 * X);
    if (0 > t1 || 1 < t1) {
      return NaN;
    } else {
      s1 = (px * t1 * t1 + qx * t1 + rx - bx) / ax;
      if (0 <= s1)
        if (s1 <= 1)
          return t1;
      return NaN;
    }
  }
  var /** @type {number} */ t2, /** @type {number} */ s2;
  var /** @type {number} */ d2 = Math.sqrt(d);
  t1 = (-Y + d2) / (2 * X);
  t2 = (-Y - d2) / (2 * X);
  s1 = (0 > t1 || 1 < t1) ? 2 : (px * t1 * t1 + qx * t1 + rx - bx) / ax;
  s2 = (0 > t2 || 1 < t2) ? 2 : (px * t2 * t2 + qx * t2 + rx - bx) / ax;
  if (s1 < s2)
    if (0 <= s1)
      if (s1 <= 1)
        return t1;
  if (s2 < s1)
    if (0 <= s2)
      if (s2 <= 1)
        return t2;
  if (s1 < 0)
    if (0 <= s2)
      if (s2 <= 1)
        return t2;
  if (s2 < 0)
    if (0 <= s1)
      if (s1 <= 1)
        return t1;
  return NaN;
};


ParticleTest.Curve.prototype.get__p0x = function() {
  return this._p0x;
};


ParticleTest.Curve.prototype.set__p0x = function(v) {
  this._p0x = v;
};


ParticleTest.Curve.prototype.get__p0y = function() {
  return this._p0y;
};


ParticleTest.Curve.prototype.set__p0y = function(v) {
  this._p0y = v;
};


ParticleTest.Curve.prototype.get__p1x = function() {
  return this._p1x;
};


ParticleTest.Curve.prototype.set__p1x = function(v) {
  this._p1x = v;
};


ParticleTest.Curve.prototype.get__p1y = function() {
  return this._p1y;
};


ParticleTest.Curve.prototype.set__p1y = function(v) {
  this._p1y = v;
};


ParticleTest.Curve.prototype.get__p2x = function() {
  return this._p2x;
};


ParticleTest.Curve.prototype.set__p2x = function(v) {
  this._p2x = v;
};


ParticleTest.Curve.prototype.get__p2y = function() {
  return this._p2y;
};


ParticleTest.Curve.prototype.set__p2y = function(v) {
  this._p2y = v;
};


Object.defineProperties(ParticleTest.Curve.prototype, /** @lends {ParticleTest.Curve.prototype} */ {
/**
  * @export
  * @type {number} */
p0x: {
get: ParticleTest.Curve.prototype.get__p0x,
set: ParticleTest.Curve.prototype.set__p0x},
/**
  * @export
  * @type {number} */
p0y: {
get: ParticleTest.Curve.prototype.get__p0y,
set: ParticleTest.Curve.prototype.set__p0y},
/**
  * @export
  * @type {number} */
p1x: {
get: ParticleTest.Curve.prototype.get__p1x,
set: ParticleTest.Curve.prototype.set__p1x},
/**
  * @export
  * @type {number} */
p1y: {
get: ParticleTest.Curve.prototype.get__p1y,
set: ParticleTest.Curve.prototype.set__p1y},
/**
  * @export
  * @type {number} */
p2x: {
get: ParticleTest.Curve.prototype.get__p2x,
set: ParticleTest.Curve.prototype.set__p2x},
/**
  * @export
  * @type {number} */
p2y: {
get: ParticleTest.Curve.prototype.get__p2y,
set: ParticleTest.Curve.prototype.set__p2y}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
ParticleTest.Curve.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Curve', qName: 'ParticleTest.Curve', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
ParticleTest.Curve.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'p0x': { type: 'Number', access: 'readwrite', declaredBy: 'ParticleTest.Curve'},
        'p0y': { type: 'Number', access: 'readwrite', declaredBy: 'ParticleTest.Curve'},
        'p1x': { type: 'Number', access: 'readwrite', declaredBy: 'ParticleTest.Curve'},
        'p1y': { type: 'Number', access: 'readwrite', declaredBy: 'ParticleTest.Curve'},
        'p2x': { type: 'Number', access: 'readwrite', declaredBy: 'ParticleTest.Curve'},
        'p2y': { type: 'Number', access: 'readwrite', declaredBy: 'ParticleTest.Curve'}
      };
    },
    methods: function () {
      return {
        'Curve': { type: '', declaredBy: 'ParticleTest.Curve'},
        'reset': { type: 'void', declaredBy: 'ParticleTest.Curve'},
        'getT': { type: 'Number', declaredBy: 'ParticleTest.Curve', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: false },{ index: 4, type: 'Number', optional: false } ]; }}
      };
    }
  };
};



/**
 * @constructor
 */
ParticleTest.Ball = function() {
  this.reset();
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('ParticleTest.Ball', ParticleTest.Ball);


/**
 * @private
 * @type {number}
 */
ParticleTest.Ball.prototype._prevx;

/**
 * @private
 * @type {number}
 */
ParticleTest.Ball.prototype._prevy;


/**
 * @private
 * @type {number}
 */
ParticleTest.Ball.prototype._x;

/**
 * @private
 * @type {number}
 */
ParticleTest.Ball.prototype._y;


/**
 * @private
 * @type {number}
 */
ParticleTest.Ball.prototype._vx;

/**
 * @private
 * @type {number}
 */
ParticleTest.Ball.prototype._vy;


/**
 * @export
 * @param {ParticleTest.Curve} curve
 * @param {number} t
 */
ParticleTest.Ball.prototype.resolve = function(curve, t) {
  var /** @type {number} */ dx = (2 * curve.p0x - 4 * curve.p1x + 2 * curve.p2x) * t + (-2 * curve.p0x + 2 * curve.p1x);
  var /** @type {number} */ dy = (2 * curve.p0y - 4 * curve.p1y + 2 * curve.p2y) * t + (-2 * curve.p0y + 2 * curve.p1y);
  var /** @type {number} */ d = Math.sqrt(dx * dx + dy * dy);
  dx /= d, dy /= d;
  var /** @type {number} */ K = 2 * (this._vx * dx + this._vy * dy);
  this._x = ParticleTest.bezier([curve.p0x, curve.p1x, curve.p2x], t);
  this._y = ParticleTest.bezier([curve.p0y, curve.p1y, curve.p2y], t);
  this._vx = (K * dx - this._vx) * 0.7;
  this._vy = (K * dy - this._vy) * 0.7;
  if (this._vy < 0) {
    this._x -= -dy;
    this._y -= dx;
  }
  else
    this._x += dy, this._y += -dx;
};


/**
 * @export
 */
ParticleTest.Ball.prototype.reset = function() {
  this._vx = Math.random() * 10 - 5, this._vy = Math.random() * 10 - 5;
  this._prevx = this._x = Math.random() * 550;
  this._prevy = this._y = 0;
};


ParticleTest.Ball.prototype.get__prevx = function() {
  return this._prevx;
};


ParticleTest.Ball.prototype.set__prevx = function(v) {
  this._prevx = v;
};


ParticleTest.Ball.prototype.get__prevy = function() {
  return this._prevy;
};


ParticleTest.Ball.prototype.set__prevy = function(v) {
  this._prevy = v;
};


ParticleTest.Ball.prototype.get__x = function() {
  return this._x;
};


ParticleTest.Ball.prototype.set__x = function(v) {
  this._x = v;
};


ParticleTest.Ball.prototype.get__y = function() {
  return this._y;
};


ParticleTest.Ball.prototype.set__y = function(v) {
  this._y = v;
};


ParticleTest.Ball.prototype.get__vx = function() {
  return this._vx;
};


ParticleTest.Ball.prototype.set__vx = function(v) {
  this._vx = v;
};


ParticleTest.Ball.prototype.get__vy = function() {
  return this._vy;
};


ParticleTest.Ball.prototype.set__vy = function(v) {
  this._vy = v;
};


Object.defineProperties(ParticleTest.Ball.prototype, /** @lends {ParticleTest.Ball.prototype} */ {
/**
  * @export
  * @type {number} */
prevx: {
get: ParticleTest.Ball.prototype.get__prevx,
set: ParticleTest.Ball.prototype.set__prevx},
/**
  * @export
  * @type {number} */
prevy: {
get: ParticleTest.Ball.prototype.get__prevy,
set: ParticleTest.Ball.prototype.set__prevy},
/**
  * @export
  * @type {number} */
x: {
get: ParticleTest.Ball.prototype.get__x,
set: ParticleTest.Ball.prototype.set__x},
/**
  * @export
  * @type {number} */
y: {
get: ParticleTest.Ball.prototype.get__y,
set: ParticleTest.Ball.prototype.set__y},
/**
  * @export
  * @type {number} */
vx: {
get: ParticleTest.Ball.prototype.get__vx,
set: ParticleTest.Ball.prototype.set__vx},
/**
  * @export
  * @type {number} */
vy: {
get: ParticleTest.Ball.prototype.get__vy,
set: ParticleTest.Ball.prototype.set__vy}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
ParticleTest.Ball.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Ball', qName: 'ParticleTest.Ball', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
ParticleTest.Ball.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'prevx': { type: 'Number', access: 'readwrite', declaredBy: 'ParticleTest.Ball'},
        'prevy': { type: 'Number', access: 'readwrite', declaredBy: 'ParticleTest.Ball'},
        'x': { type: 'Number', access: 'readwrite', declaredBy: 'ParticleTest.Ball'},
        'y': { type: 'Number', access: 'readwrite', declaredBy: 'ParticleTest.Ball'},
        'vx': { type: 'Number', access: 'readwrite', declaredBy: 'ParticleTest.Ball'},
        'vy': { type: 'Number', access: 'readwrite', declaredBy: 'ParticleTest.Ball'}
      };
    },
    methods: function () {
      return {
        'Ball': { type: '', declaredBy: 'ParticleTest.Ball'},
        'resolve': { type: 'void', declaredBy: 'ParticleTest.Ball', parameters: function () { return [  { index: 1, type: 'Curve', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        'reset': { type: 'void', declaredBy: 'ParticleTest.Ball'}
      };
    }
  };
};
